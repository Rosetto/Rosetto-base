// plugins
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

// encoding
def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }

// defaulttasks
defaultTasks 'clean', 'build'

sourceCompatibility = 1.8

ext {
    project.version = '0.1.2'
    project.group = 'org.ocsoft'
    appName = 'rosetto-script'
    project.description = 'Rosetto script and parser'
    mainClass = 'org.ocsoft.dummy.Launcher'
}



dependencies {
    compile 'com.google.code.findbugs:jsr305:3.+'
    compile 'com.fasterxml.jackson.core:jackson-core:2.3.1'
    compile 'org.apache.commons:commons-lang3:3.2.1'
    
    compile 'org.frows:lilex:0.0.4'
    compile 'org.frows:observatories:0.0.6'
    
    testCompile 'junit:junit:4.+'
}

repositories {
    mavenCentral()
    mavenLocal()
    flatDir { dirs 'lib' }
}

task runMain(dependsOn: classes, type: JavaExec) {
    main = mainClass
    classpath sourceSets.main.output.classesDir
    classpath configurations.compile
}

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}


uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: m2Repository)
            pom.version = project.version
            pom.groupId = project.group
            pom.artifactId = appName
        }
    }
}

jar {
    //from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    from (configurations.compile.collect { it.isDirectory() ? it : fileTree(it) }) {
        exclude '**/*.jar'
    }
    manifest.mainAttributes("Main-Class" : mainClass)
}
